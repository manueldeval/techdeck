doctype html
html(style="height:100%")
  head
    //- FOR TERMINAL AND BROWSER
    script(src="/xterm/dist/xterm.js")
    link(rel="stylesheet" href="/xterm/dist/xterm.css")
    script(src="/xterm/dist/addons/fit/fit.js")
    script(src="/socket.io-client/dist/socket.io.js")

    script(src="/vue/dist/vue.js")
    script(src="/static/bus.js")

    style.
      body {
        margin: 0;
        padding: 0;
      }


  body(style="height:100%;min-width:200px;min-height:200px;")
    div(id="terminal" style="width:100%;height:100%")   

    script.

      const DISCONNECTED = 0;
      const CONNECTING = 1;
      const CONNECTED = 2;
      const address = "#{params.busAddress}";

      var term = null;
      var socket = null;
      var state = DISCONNECTED;


      var hostId = "#{params.hostId}";
      var startupCommand = "#{params.startupCommand}";
      var autoStart = ("#{params.autoStart}" == "true");

      var setState = function(newState){
        state = newState;
        BUS.publish(address,"status",state)
      }

      var disconnect = function(){
        console.log("DISCONNECTING!")
        if (socket){
          socket.disconnect()
        }
        setState(DISCONNECTED);
      }

      var create = function(){
        setState(DISCONNECTED);

        Terminal.applyAddon(fit);
        term = new Terminal({ 
          fontSize: #{params.fontSize},
          cursorBlink: true, 
          //rendererType: 'dom',
          //fontFamily: 'Ubuntu Mono, courier-new, courier, monospace',
          theme:  { background: '#202020' }
        });

        var terminalContainer = document.getElementById('terminal');
        term.open(terminalContainer);
        term.fit();
      }


      var connect = function(){
        console.log("CONNECTING!")
        setState(CONNECTING);
        
        socket = io.connect({ query: { id: hostId } })
        socket.on('connect', function() {
          setState(CONNECTED);
          // TERM => NODE
          term.on('resize', function(evt) {
            var message = {t: "resize", v: {cols: evt.cols, rows: evt.rows} };
            socket.emit('data', message); 
          });

          term.on('data', function(data) { 
            var message = {t: "key", v: data };
            socket.emit('data', message); 
          });

          window.onresize = function(){
            term.fit();
            var message = {t: "resize", v: {cols: term.cols, rows: term.rows} };
            socket.emit('data', message);
          }

          // BUS => NODE
          BUS.subscribe(address,"command",function(command){
            var message = {t: "key", v: command };
            socket.emit('data', message);  
          });

          // NODE => TERM
          var first = true;
          socket.on('data', function(data) { 
            term.write(data);
            if (first){
              var message = {t: "resize", v: {cols: term.cols, rows: term.rows} };
              socket.emit('data', message); 
              if (startupCommand){
                socket.emit('data',{t: "key", v: startupCommand });
              }
              first = false;
            }
          });
          socket.on('disconnect', function() {
            console.log("IO Disconnected! ")
          });
        });
      }

      BUS.subscribe(address,"connect",function(doConnect){
        console.log("Do connect: ",doConnect)
        if (doConnect){
          connect()
        } else {
          disconnect()
        }
      });

      create();
      if (autoStart){
        connect();
      }

      // Workaround... Chrome perd le focus si
      // on entre directement dans une autre iframe, 
      // le term ne recupere alors plus jamais le focus
      window.onfocus = function(){
        term.focus()
      }
      window.onblur = function(){
        term.blur()
      }

